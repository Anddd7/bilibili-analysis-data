// find plugin
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${SpringBootVersion}")
        classpath "com.palantir.gradle.docker:gradle-docker:${GradleDockerVersion}"
    }
}

// common config
allprojects {
    group = 'com.github.anddd7'
    version = rootVersion

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url = 'https://repo.spring.io/libs-milestone'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.7"
}

task clean {
    doLast {
        file('./build').deleteDir()
    }
}

// docker-compose shell
String composeFile = rootProject.projectDir.getPath() + "/projects/docker-compose.yml"
task removeComposeContainer() {
    doFirst {
        dockerCompose(composeFile, 'kill')
        dockerCompose(composeFile, 'rm', '-f')
    }
}

task buildComposeImages() {
    doFirst {
        dockerCompose(composeFile, 'build')
    }
}

task runDockerCompose() {
    doLast {
        dockerCompose(composeFile, 'up', '-d')
    }
}

def dockerCompose(String composeFile, String... command) {
    List<String> lineArgs = new ArrayList<>()
    lineArgs.add('-f')
    lineArgs.add(composeFile)
    Collections.addAll(lineArgs, command)
    exec {
        executable "docker-compose"
        args lineArgs.toArray(new String[0])
    }
}
